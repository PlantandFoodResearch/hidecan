[{"path":"https://plantandfoodresearch.github.io/hidecan/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 hidecan authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan-step-by-step.html","id":"formatting-input-data","dir":"Articles","previous_headings":"","what":"Formatting input data","title":"Creating a HIDECAN plot step by step","text":"hood, hidecan package relies S3 classes, really just tibbles specific columns. constructors S3 classes perform series checks computations make sure required columns (chromosome, score, position) present data. GWAS results data-frames turned GWAS_data objects GWAS_data() constructor: DE results data-frames turned DE_data objects DE_data() constructor: Candidate genes data-frames turned CAN_data objects CAN_data() constructor: constructors throw error required column missing input data (e.g. chromosome column): also compute marker gene scores adjusted p-values necessary (see Input data section hidecan vignette). example, DE results, provide padj column (adjusted p-values genes) rather score column, constructor compute score column based padj column. can also notice position column computed based start end genes:","code":"gwas_data <- GWAS_data(x[[\"GWAS\"]])  class(gwas_data) #> [1] \"GWAS_data\"  \"tbl_df\"     \"tbl\"        \"data.frame\"  head(gwas_data) #> # A tibble: 6 × 4 #>   id                  chromosome position score #>   <chr>               <chr>         <dbl> <dbl> #> 1 ST4.03ch00_45467783 ST4.03ch00 45467783 0.191 #> 2 ST4.03ch01_88589716 ST4.03ch01 88589716 1.84  #> 3 ST4.03ch02_48614228 ST4.03ch02 48614228 0.381 #> 4 ST4.03ch03_62263578 ST4.03ch03 62263578 0.661 #> 5 ST4.03ch04_72139135 ST4.03ch04 72139135 0.640 #> 6 ST4.03ch05_52040302 ST4.03ch05 52040302 0.346 de_data <- DE_data(x[[\"DE\"]])  class(de_data) #> [1] \"DE_data\"    \"tbl_df\"     \"tbl\"        \"data.frame\"  head(de_data) #> # A tibble: 6 × 9 #>   gene     chromosome   padj log2FoldChange  start    end label   score position #>   <chr>    <chr>       <dbl>          <dbl>  <dbl>  <dbl> <chr>   <dbl>    <dbl> #> 1 PGSC000… ST4.03ch00  0.787       0.0114   4.58e7 4.58e7 Prot…  0.104    4.58e7 #> 2 PGSC000… ST4.03ch01  0.630       0.00529  8.86e7 8.86e7 PhD-…  0.201    8.86e7 #> 3 PGSC000… ST4.03ch02  0.864       0.00362  4.86e7 4.86e7 Acet…  0.0637   4.86e7 #> 4 PGSC000… ST4.03ch03  0.530       0.0320   6.23e7 6.23e7 Phos…  0.276    6.23e7 #> 5 PGSC000… ST4.03ch04  0.975       0.00225  7.22e7 7.22e7 Cons…  0.0109   7.22e7 #> 6 PGSC000… ST4.03ch05 NA          -0.000726 5.20e7 5.20e7 Cons… NA        5.20e7 ## CAN_data constructor can_data <- CAN_data(x[[\"CAN\"]])  class(can_data) #> [1] \"CAN_data\"   \"tbl_df\"     \"tbl\"        \"data.frame\"  head(can_data) #> # A tibble: 6 × 7 #>   id                   chromosome    start      end name      gene_name position #>   <chr>                <chr>         <dbl>    <dbl> <chr>     <chr>        <dbl> #> 1 PGSC0003DMG400003155 ST4.03ch03 46757152 46762127 4CL       4-coumar…   4.68e7 #> 2 PGSC0003DMG400014223 ST4.03ch03 57466692 57469946 4CL2      4-coumar…   5.75e7 #> 3 PGSC0003DMG400011189 ST4.03ch07  1001854  1006278 HQT       HQT         1.00e6 #> 4 PGSC0003DMG400005492 ST4.03ch05 36342746 36347409 PAL       phenylal…   3.63e7 #> 5 PGSC0003DMG400005279 ST4.03ch05 42523943 42525912 peroxida… peroxida…   4.25e7 #> 6 PGSC0003DMG400007782 ST4.03ch03 38537202 38540209 PHO1A     PHO1A       3.85e7 gwas_wrong_input <- x[[\"GWAS\"]] |>    select(-chromosome)  GWAS_data(gwas_wrong_input) #> Error: Input data-frame is missing the following columns: 'chromosome'. ## Input tibble head(x[[\"DE\"]]) #> # A tibble: 6 × 7 #>   gene                 chromosome   padj log2FoldChange    start      end label  #>   <chr>                <chr>       <dbl>          <dbl>    <dbl>    <dbl> <chr>  #> 1 PGSC0003DMG400032056 ST4.03ch00  0.787       0.0114   45813195 45813526 Prote… #> 2 PGSC0003DMG400018039 ST4.03ch01  0.630       0.00529  88623473 88627702 PhD-f… #> 3 PGSC0003DMG400020231 ST4.03ch02  0.864       0.00362  48563271 48578978 Acety… #> 4 PGSC0003DMG400009197 ST4.03ch03  0.530       0.0320   62256322 62258929 Phosp… #> 5 PGSC0003DMG403025662 ST4.03ch04  0.975       0.00225  72168842 72170119 Conse… #> 6 PGSC0003DMG400023316 ST4.03ch05 NA          -0.000726 52039916 52040326 Conse…  ## Output of the DE_data constructor head(de_data) #> # A tibble: 6 × 9 #>   gene     chromosome   padj log2FoldChange  start    end label   score position #>   <chr>    <chr>       <dbl>          <dbl>  <dbl>  <dbl> <chr>   <dbl>    <dbl> #> 1 PGSC000… ST4.03ch00  0.787       0.0114   4.58e7 4.58e7 Prot…  0.104    4.58e7 #> 2 PGSC000… ST4.03ch01  0.630       0.00529  8.86e7 8.86e7 PhD-…  0.201    8.86e7 #> 3 PGSC000… ST4.03ch02  0.864       0.00362  4.86e7 4.86e7 Acet…  0.0637   4.86e7 #> 4 PGSC000… ST4.03ch03  0.530       0.0320   6.23e7 6.23e7 Phos…  0.276    6.23e7 #> 5 PGSC000… ST4.03ch04  0.975       0.00225  7.22e7 7.22e7 Cons…  0.0109   7.22e7 #> 6 PGSC000… ST4.03ch05 NA          -0.000726 5.20e7 5.20e7 Cons… NA        5.20e7"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan-step-by-step.html","id":"computing-chromosome-length","dir":"Articles","previous_headings":"","what":"Computing chromosome length","title":"Creating a HIDECAN plot step by step","text":"input datasets formatted appropriately, used compute length chromosomes present data. done combine_chrom_length() function, applied list GWAS_data, DE_data CAN_data objects: function works calling element list compute_chrom_length() function. function, according whether input tibble markers (GWAS_data) genes (DE_data CAN_data), looks maximum value either position column (markers) end column (genes).","code":"chrom_length <- combine_chrom_length(list(gwas_data,                                           de_data,                                           can_data))  chrom_length #> # A tibble: 13 × 2 #>    chromosome   length #>    <chr>         <dbl> #>  1 ST4.03ch00 45813526 #>  2 ST4.03ch01 88627702 #>  3 ST4.03ch02 48614228 #>  4 ST4.03ch03 62263578 #>  5 ST4.03ch04 72170119 #>  6 ST4.03ch05 52040326 #>  7 ST4.03ch06 59476545 #>  8 ST4.03ch07 56715111 #>  9 ST4.03ch08 56937627 #> 10 ST4.03ch09 61539681 #> 11 ST4.03ch10 59687482 #> 12 ST4.03ch11 45409456 #> 13 ST4.03ch12 61152223 head(compute_chrom_length(gwas_data), 3) #> # A tibble: 3 × 2 #>   chromosome   length #>   <chr>         <dbl> #> 1 ST4.03ch00 45467783 #> 2 ST4.03ch01 88589716 #> 3 ST4.03ch02 48614228  head(compute_chrom_length(de_data), 3) #> # A tibble: 3 × 2 #>   chromosome   length #>   <chr>         <dbl> #> 1 ST4.03ch00 45813526 #> 2 ST4.03ch01 88627702 #> 3 ST4.03ch02 48578978"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan-step-by-step.html","id":"applying-threshold","dir":"Articles","previous_headings":"","what":"Applying threshold","title":"Creating a HIDECAN plot step by step","text":"Next, GWAS DE results tibbles filtered according threshold, order retain significant markers genes. done apply_threshold() function. function two (rather self-explanatory) arguments: score_thr log2fc_thr. applied GWAS_data object, function filters markers score value set score_thr argument (log2fc_thr argument ignored), returns object class GWAS_data_thr: DE_data object, apply_threshold function filters genes based score log2(fold-change), returns object class DE_data_thr: Finally, applied CAN_data object, apply_threshold() function simply returns input tibble object class CAN_data_thr: GWAS_data, DE_data CAN_data objects, GWAS_data_thr, DE_data_thr CAN_data_thr objects really just tibbles.","code":"dim(gwas_data) #> [1] 35481     4  gwas_data_thr <- apply_threshold(gwas_data,                                   score_thr = 4)  class(gwas_data_thr) #> [1] \"GWAS_data_thr\" \"tbl_df\"        \"tbl\"           \"data.frame\"  dim(gwas_data_thr) #> [1] 37  4  head(gwas_data_thr) #> # A tibble: 6 × 4 #>   id                  chromosome position score #>   <chr>               <chr>         <dbl> <dbl> #> 1 ST4.03ch00_22680252 ST4.03ch00 22680252  4.41 #> 2 ST4.03ch01_6317643  ST4.03ch01  6317643  4.15 #> 3 ST4.03ch01_7671100  ST4.03ch01  7671100  4.43 #> 4 ST4.03ch01_8653747  ST4.03ch01  8653747  4.69 #> 5 ST4.03ch01_12842648 ST4.03ch01 12842648  6.85 #> 6 ST4.03ch01_13334335 ST4.03ch01 13334335  5.24 dim(de_data) #> [1] 10671     9  de_data_thr <- apply_threshold(de_data,                                 score_thr = 2,                                log2fc_thr = 0.5)  class(de_data_thr) #> [1] \"DE_data_thr\" \"tbl_df\"      \"tbl\"         \"data.frame\"  dim(de_data_thr) #> [1] 2 9  head(de_data_thr) #> # A tibble: 2 × 9 #>   gene      chromosome    padj log2FoldChange  start    end label score position #>   <chr>     <chr>        <dbl>          <dbl>  <dbl>  <dbl> <chr> <dbl>    <dbl> #> 1 PGSC0003… ST4.03ch10 0.00480          0.757 3.30e7 3.30e7 Cons…  2.32   3.30e7 #> 2 PGSC0003… ST4.03ch10 0.00305          0.691 5.82e7 5.82e7 N-ac…  2.52   5.82e7 dim(can_data) #> [1] 32  7  can_data_thr <- apply_threshold(can_data,                                  score_thr = 2,                                 log2fc_thr = 0.5)  class(can_data_thr) #> [1] \"CAN_data_thr\" \"tbl_df\"       \"tbl\"          \"data.frame\"  dim(can_data_thr) #> [1] 32  7  head(can_data_thr) #> # A tibble: 6 × 7 #>   id                   chromosome    start      end name      gene_name position #>   <chr>                <chr>         <dbl>    <dbl> <chr>     <chr>        <dbl> #> 1 PGSC0003DMG400003155 ST4.03ch03 46757152 46762127 4CL       4-coumar…   4.68e7 #> 2 PGSC0003DMG400014223 ST4.03ch03 57466692 57469946 4CL2      4-coumar…   5.75e7 #> 3 PGSC0003DMG400011189 ST4.03ch07  1001854  1006278 HQT       HQT         1.00e6 #> 4 PGSC0003DMG400005492 ST4.03ch05 36342746 36347409 PAL       phenylal…   3.63e7 #> 5 PGSC0003DMG400005279 ST4.03ch05 42523943 42525912 peroxida… peroxida…   4.25e7 #> 6 PGSC0003DMG400007782 ST4.03ch03 38537202 38540209 PHO1A     PHO1A       3.85e7"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan-step-by-step.html","id":"creating-the-hidecan-plot","dir":"Articles","previous_headings":"","what":"Creating the HIDECAN plot","title":"Creating a HIDECAN plot step by step","text":"Finally, filtered datasets combined list passed create_hidecan_plot() function, along tibble chromosome length. function generates HIDECAN ggplot:  function shares arguments hidecan_plot() wrapper controlling different aspects plot.","code":"create_hidecan_plot(   list(gwas_data_thr,        de_data_thr,        can_data_thr),   chrom_length )"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input data","title":"hidecan","text":"hidecan package takes input tibbles (data-frames) GWAS DE results candidate genes. input data-frames contain mandatory columns, depending type data. list example input datasets can obtained via get_example_data() function:","code":"x <- get_example_data()  str(x, max.level = 1) #> List of 3 #>  $ GWAS: tibble [35,481 × 4] (S3: tbl_df/tbl/data.frame) #>  $ DE  : tibble [10,671 × 7] (S3: tbl_df/tbl/data.frame) #>  $ CAN : tibble [32 × 6] (S3: tbl_df/tbl/data.frame)"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan.html","id":"gwas-results","dir":"Articles","previous_headings":"Input data","what":"GWAS results","title":"hidecan","text":"GWAS results provided tibble data-frame, one row per genetic marker. data-frame contain least following columns: chromosome: character column, giving ID chromosome marker located; position: numeric column, physical position along chromosome (base pairs - bp) marker; either score padj: numeric column, providing either score (.e. -log10(p-value)) adjusted p-value marker. score column provided, padj column ignored. padj column provided, score column constructed -log10(padj). column present data-frame ignored. example valid input shown :","code":"head(x[[\"GWAS\"]]) #> # A tibble: 6 × 4 #>   id                  chromosome position score #>   <chr>               <chr>         <dbl> <dbl> #> 1 ST4.03ch00_45467783 ST4.03ch00 45467783 0.191 #> 2 ST4.03ch01_88589716 ST4.03ch01 88589716 1.84  #> 3 ST4.03ch02_48614228 ST4.03ch02 48614228 0.381 #> 4 ST4.03ch03_62263578 ST4.03ch03 62263578 0.661 #> 5 ST4.03ch04_72139135 ST4.03ch04 72139135 0.640 #> 6 ST4.03ch05_52040302 ST4.03ch05 52040302 0.346"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan.html","id":"differential-expression-results","dir":"Articles","previous_headings":"Input data","what":"Differential expression results","title":"hidecan","text":"DE results provided tibble data-frame, one row per gene. data-frame contain least following columns: chromosome: character column, giving ID chromosome gene located; start end: numeric columns, giving starting end position gene along chromosome (bp). two columns used calculate position gene half-way point start end gene. either score padj: numeric column, providing either score (.e. -log10(p-value)) adjusted p-value gene. score column provided, padj column ignored. padj column provided, score column constructed -log10(padj). either foldChange log2FoldChange: numeric column, giving either fold-change log2(fold-change) gene. log2FoldChange column provided, foldChange column ignored. foldChange column provided, log2FoldChange constructed log2(foldChange). column present data-frame ignored. example valid input shown : (Note example dataset, genes missing values padj column; corresponds genes filtered via independent filtering DESeq2 package).","code":"head(x[[\"DE\"]]) #> # A tibble: 6 × 7 #>   gene                 chromosome   padj log2FoldChange    start      end label  #>   <chr>                <chr>       <dbl>          <dbl>    <dbl>    <dbl> <chr>  #> 1 PGSC0003DMG400032056 ST4.03ch00  0.787       0.0114   45813195 45813526 Prote… #> 2 PGSC0003DMG400018039 ST4.03ch01  0.630       0.00529  88623473 88627702 PhD-f… #> 3 PGSC0003DMG400020231 ST4.03ch02  0.864       0.00362  48563271 48578978 Acety… #> 4 PGSC0003DMG400009197 ST4.03ch03  0.530       0.0320   62256322 62258929 Phosp… #> 5 PGSC0003DMG403025662 ST4.03ch04  0.975       0.00225  72168842 72170119 Conse… #> 6 PGSC0003DMG400023316 ST4.03ch05 NA          -0.000726 52039916 52040326 Conse…"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan.html","id":"candidate-genes","dir":"Articles","previous_headings":"Input data","what":"Candidate genes","title":"hidecan","text":"list candidate genes (e.g. genes previously found associated trait interest based literature search) can provided tibble data-frame, one row per gene. data-frame can also contain variants interest (see ). data-frame contain least following columns: chromosome: character column, giving ID chromosome gene located; start end: numeric columns, giving starting end position gene along chromosome (bp). two columns used calculate position gene half-way point start end gene. genomic variants markers, simply set start end columns physical position marker. name: character column, giving name candidate gene displayed HIDECAN plot. Set NA subset genes remove label plot (can help many genes close, avoid cluttering plot). column present data-frame ignored. example valid input shown :","code":"head(x[[\"CAN\"]]) #> # A tibble: 6 × 6 #>   id                   chromosome    start      end name       gene_name         #>   <chr>                <chr>         <dbl>    <dbl> <chr>      <chr>             #> 1 PGSC0003DMG400003155 ST4.03ch03 46757152 46762127 4CL        4-coumarate-CoA … #> 2 PGSC0003DMG400014223 ST4.03ch03 57466692 57469946 4CL2       4-coumarate-CoA … #> 3 PGSC0003DMG400011189 ST4.03ch07  1001854  1006278 HQT        HQT               #> 4 PGSC0003DMG400005492 ST4.03ch05 36342746 36347409 PAL        phenylalanine am… #> 5 PGSC0003DMG400005279 ST4.03ch05 42523943 42525912 peroxidase peroxidase        #> 6 PGSC0003DMG400007782 ST4.03ch03 38537202 38540209 PHO1A      PHO1A"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan.html","id":"creating-a-hidecan-plot","dir":"Articles","previous_headings":"","what":"Creating a HIDECAN plot","title":"hidecan","text":"hidecan_plot() function creates HIDECAN plot. takes input data-frames presented , well score log2(fold-change) thresholds used select significant markers genes. example, show markers score 4, corresponds p-value 1×10−41\\times10^{-4}, genes score 1.3, corresponds p-value 0.05. don’t place threshold log2(fold-change) genes:  Note possible provide subset possible input data, e.g. GWAS results list candidate genes:","code":"hidecan_plot(   gwas_list = x[[\"GWAS\"]],          ## data-frame of GWAS results             de_list = x[[\"DE\"]],              ## data-frame of DE results                 can_list = x[[\"CAN\"]],            ## data-frame of candidate genes               score_thr_gwas = -log10(0.0001),  ## sign. threshold for GWAS   score_thr_de = -log10(0.05),      ## sign. threshold for DE   log2fc_thr = 0                    ## log2FC threshold for DE ) hidecan_plot(   gwas_list = x[[\"GWAS\"]],             can_list = x[[\"CAN\"]],               score_thr_gwas = 4 )"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan.html","id":"removing-empty-chromosomes","dir":"Articles","previous_headings":"","what":"Removing empty chromosomes","title":"hidecan","text":"default, HIDECAN plot shows chromosomes present input data. However, possible chromosomes appear empty, contain significant gene marker, candidate gene. case, possible exclude “empty” chromosomes HIDECAN plot, remove_empty_chrom argument. demonstrate increasing score threshold applied GWAS results, order get fewer significant markers. case, chromosomes 0, 6, 9 10 contain significant marker gene interest:  setting remove_empty_chrom argument TRUE, chromosomes removed plot:","code":"## Chromosomes 0, 6, 9 and 10 are empty hidecan_plot(   gwas_list = x[[\"GWAS\"]],             can_list = x[[\"CAN\"]],               score_thr_gwas = 5 ) hidecan_plot(   gwas_list = x[[\"GWAS\"]],             can_list = x[[\"CAN\"]],               score_thr_gwas = 5,   remove_empty_chrom = TRUE )"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan.html","id":"selecting-chromosomes-and-genomic-positions","dir":"Articles","previous_headings":"","what":"Selecting chromosomes and genomic positions","title":"hidecan","text":"possible specify chromosomes represented HIDECAN plot, via chroms argument. example, following command restrict plot chromosomes 7 8:  can also “zoom ” chromosomes, chrom_limits argument. zoom chromosomes , pass chrom_limits argument integer vector length 2, gives lower upper limits bp use. example , focus 10-20Mb region chromosome:  Alternatively, can apply different limits chromosomes, passing named list argument. names list match chromosomes name, element integer vector length 2 giving lower upper limits bp use corresponding chromosome. example, focus 10-20Mb region chromosome 1, 30-40Mb region chromosome 5, leave chromosomes :  two options chroms chrom_limits can used together:","code":"hidecan_plot(   gwas_list = x[[\"GWAS\"]],                       de_list = x[[\"DE\"]],                             can_list = x[[\"CAN\"]],                     score_thr_gwas = -log10(0.0001),     score_thr_de = -log10(0.05),         log2fc_thr = 0,   chroms = c(\"ST4.03ch07\", \"ST4.03ch08\") ) hidecan_plot(   gwas_list = x[[\"GWAS\"]],                       de_list = x[[\"DE\"]],                             can_list = x[[\"CAN\"]],                     score_thr_gwas = -log10(0.0001),     score_thr_de = -log10(0.05),         log2fc_thr = 0,   chrom_limits = c(10e6, 20e6) ) hidecan_plot(   gwas_list = x[[\"GWAS\"]],                       de_list = x[[\"DE\"]],                             can_list = x[[\"CAN\"]],                     score_thr_gwas = -log10(0.0001),     score_thr_de = -log10(0.05),         log2fc_thr = 0,   chrom_limits = list(\"ST4.03ch01\" = c(10e6, 20e6),                       \"ST4.03ch05\" = c(30e6, 40e6)) ) hidecan_plot(   gwas_list = x[[\"GWAS\"]],                       de_list = x[[\"DE\"]],                             can_list = x[[\"CAN\"]],                     score_thr_gwas = -log10(0.0001),     score_thr_de = -log10(0.05),         log2fc_thr = 0,   chroms = c(\"ST4.03ch07\", \"ST4.03ch08\"),   chrom_limits = list(\"ST4.03ch07\" = c(50e6, 55e6),                       \"ST4.03ch08\" = c(45e6, 50e6)) )"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan.html","id":"colour-genes-by-log2fold-change","dir":"Articles","previous_headings":"","what":"Colour genes by log2(fold-change)","title":"hidecan","text":"default, HIDECAN plot, points representing significant markers DE genes coloured according GWAS/DE score. However, possible colour DE genes log2(fold-change) value instead, setting colour_genes_by_score argument FALSE:  Genes negative log2(fold-change) represented shade blue, genes positive log2(fold-change) represented shade red.","code":"hidecan_plot(   gwas_list = x[[\"GWAS\"]],             de_list = x[[\"DE\"]],                 can_list = x[[\"CAN\"]],               score_thr_gwas = -log10(0.0001),   score_thr_de = -log10(0.05),   log2fc_thr = 0,   colour_genes_by_score = FALSE )"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan.html","id":"more-than-one-gwas-de-or-candidate-gene-list","dir":"Articles","previous_headings":"","what":"More than one GWAS, DE or candidate gene list","title":"hidecan","text":"hidecan_plot() function can take input lists data-frames GWAS results, DE results candidate genes. way, possible visualise one GWAS DE analyses , example investigating several traits comparing two treatment groups. example, ’ll focus chromosomes 7 8 (clarity plot): ’ll create second data-frame GWAS results shuffling marker scores example dataset: can pass GWAS results data-frames hidecan_plot() function list:  default, two GWAS tracks given unique y-axis labels, can seen . possible customise naming elements input list:","code":"library(dplyr) library(purrr) library(stringr)  ## Retaining only markers and genes on chromosomes 7 and 8 x_small <- x |>    map(~ filter(.x, str_detect(chromosome, \"(07|08)\"))) ## Creating a second GWAS result tibble by shuffling  ## the marker scores from the original data gwas_1 <- x_small[[\"GWAS\"]] gwas_2 <- gwas_1 |>    mutate(score = sample(score)) hidecan_plot(   gwas_list = list(gwas_1, gwas_2),   score_thr_gwas = -log10(0.0001),   score_thr_de = -log10(0.05),   log2fc_thr = 0 ) hidecan_plot(   gwas_list = list(\"Trait 1\" = gwas_1,                     \"Trait 2\" = gwas_2),   score_thr_gwas = -log10(0.0001),   score_thr_de = -log10(0.05),   log2fc_thr = 0 )"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan.html","id":"defining-chromosomes-length","dir":"Articles","previous_headings":"","what":"Defining chromosomes length","title":"hidecan","text":"default, hidecan_plot() function calculates length different chromosomes based input data, looking maximum position genes markers chromosome. However, also possible pass tibble chromosome length (bp) chrom_length argument.  Note case can’t really see difference computed chromosome length values.","code":"library(tibble)  ## Chromosomes length as recorded in Ensembl Plants potato_chrom_length <- c(   ST4.03ch00 = 45813526,   ST4.03ch01 = 88663952,   ST4.03ch02 = 48614681,   ST4.03ch03 = 62190286,   ST4.03ch04 = 72208621,   ST4.03ch05 = 52070158,   ST4.03ch06 = 59532096,   ST4.03ch07 = 56760843,   ST4.03ch08 = 56938457,   ST4.03ch09 = 61540751,   ST4.03ch10 = 59756223,   ST4.03ch11 = 45475667,   ST4.03ch12 = 61165649 ) |>    ## turn a named vector into a tibble   enframe(name = \"chromosome\",           value = \"length\")  head(potato_chrom_length) #> # A tibble: 6 × 2 #>   chromosome   length #>   <chr>         <dbl> #> 1 ST4.03ch00 45813526 #> 2 ST4.03ch01 88663952 #> 3 ST4.03ch02 48614681 #> 4 ST4.03ch03 62190286 #> 5 ST4.03ch04 72208621 #> 6 ST4.03ch05 52070158 hidecan_plot(   gwas_list = x[[\"GWAS\"]],             de_list = x[[\"DE\"]],                 can_list = x[[\"CAN\"]],   score_thr_gwas = -log10(0.0001),   score_thr_de = -log10(0.05),   log2fc_thr = 0,   chrom_length = potato_chrom_length )"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan.html","id":"controlling-the-plot-properties","dir":"Articles","previous_headings":"","what":"Controlling the plot properties","title":"hidecan","text":"hidecan_plot() function offers several arguments control different aspects HIDECAN plot. example, possible specify number rows columns plot , n_rows n_cols arguments. Note one arguments considered (n_rows takes precedence):   addition, possible : add title subtitle plot (title subtitle arguments); control position legend (legend_position argument); control size points (point_size argument); control size labels padding around text candidate genes labels (label_size label_padding arguments).","code":"## Specifying the number of rows hidecan_plot(   gwas_list = x[[\"GWAS\"]],             de_list = x[[\"DE\"]],                 can_list = x[[\"CAN\"]],               score_thr_gwas = -log10(0.0001),   score_thr_de = -log10(0.05),   log2fc_thr = 0,   n_rows = 3 ) ## Specifying the number of columns hidecan_plot(   gwas_list = x[[\"GWAS\"]],             de_list = x[[\"DE\"]],                 can_list = x[[\"CAN\"]],               score_thr_gwas = -log10(0.0001),   score_thr_de = -log10(0.005),   log2fc_thr = 0,   n_cols = 3 )"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan.html","id":"creating-a-manhattan-plot","dir":"Articles","previous_headings":"","what":"Creating a Manhattan plot","title":"hidecan","text":"possible visualise GWAS results Manhattan plot manhattan_plot() function. function takes input data-frame (list data-frames) GWAS results, must follow rules plot_hidecan() function (see section vignette). horizontal line representing significance threshold can added plot, passing threshold value score_thr argument.  hidecan_plot() function, possible pass list GWAS results function, order draw several Manhattan plots one figure. names list used identify different plots:","code":"manhattan_plot(x[[\"GWAS\"]], score_thr = 4) manhattan_plot(list(\"Trait A\" = x[[\"GWAS\"]],                     \"Trait B\" = x[[\"GWAS\"]]),                 score_thr = 4,                ncol = 1)"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/hidecan.html","id":"viewport-error","dir":"Articles","previous_headings":"","what":"Viewport error","title":"hidecan","text":"working RStudio, may encounter following error: caused plotting window small. Try increasing size plotting window RStudio console. Alternatively, can save plot R object, use ggplot2::ggsave() save file:","code":"#> Error in grid.Call(C_convert, x, as.integer(whatfrom), as.integer(whatto), : Viewport has zero dimension(s) p <- hidecan_plot(   gwas_list = x[[\"GWAS\"]],   de_list = x[[\"DE\"]],   can_list = x[[\"CAN\"]],   score_thr_gwas = -log10(0.0001),   score_thr_de = -log10(0.05),   log2fc_thr = 0,   label_size = 2 )  ggplot2::ggsave(\"hidecan_plot.pdf\", p, width = 10, height = 10)"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/web_only/gwaspoly_output.html","id":"gwaspoly-example-data","dir":"Articles > Web_only","previous_headings":"","what":"GWASpoly example data","title":"HIDECAN plot from GWASpoly output","text":"example GWASpoly output, based original example dataset GWASpoly package provided package can loaded 1: example, three traits analysed: tuber_eye_depth, tuber_shape sucrose. trait, GWAS scores computed four different genetic models: general, additive, 1-dom-alt 1-dom-ref: See Appendix section bottom vignette code used generate example data.","code":"gwaspoly_res_thr <- readRDS(system.file(\"extdata/gwaspoly_res_thr.rda\", package = \"hidecan\")) ## Traits analysed names(gwaspoly_res_thr@scores) #> [1] \"tuber_eye_depth\" \"tuber_shape\"     \"sucrose\"  ## Genetic models tests head(gwaspoly_res_thr@scores[[1]]) #>             general  additive 1-dom-alt 1-dom-ref #> c2_41437 0.45584445 0.4774282 0.1430731        NA #> c2_24258 0.32552500 0.1655215        NA 0.0431065 #> c2_21332 0.06251865 0.2263273 0.1562208 0.4488712 #> c2_21320 0.92927679 0.5774697        NA 1.0170807 #> c2_21318 0.09043940 0.2200563 0.1410284        NA #> c2_21314 0.19480464 0.6442068        NA 0.4286548"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/web_only/gwaspoly_output.html","id":"hidecan-plot-from-gwaspoly-output","dir":"Articles > Web_only","previous_headings":"","what":"HIDECAN plot from GWASpoly output","title":"HIDECAN plot from GWASpoly output","text":"hidecan_plot_from_gwaspoly() function reads GWASpoly.thresh object, extracts marker scores combination trait genetic model, uses construct HIDECAN plot. y-axis, trait indicated first, genetic model next brackets:  HIDECAN plot, can easily see genomic region around 50Mb chromosome 10 significantly associated tuber eye depth shape, using either general additive model. region significantly associated either traits considering one simplex dominant models. sucrose phenotype, general model detected significant markers. possible specify traits /genetic models represented HIDECAN plot, via traits models arguments:","code":"hidecan_plot_from_gwaspoly(   gwaspoly_res_thr,   remove_empty_chrom = TRUE   ) hidecan_plot_from_gwaspoly(   gwaspoly_res_thr,   traits = c(\"tuber_eye_depth\", \"tuber_shape\"),   models = \"general\",   remove_empty_chrom = TRUE   )"},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/web_only/gwaspoly_output.html","id":"the-gwaspoly-constructor","dir":"Articles > Web_only","previous_headings":"","what":"The GWASpoly constructor","title":"HIDECAN plot from GWASpoly output","text":"hood, hidecan_plot_from_gwaspoly() function relies GWAS_data_from_gwaspoly() constructor, takes input either: GWASpoly.fitted object (returned GWASpoly::GWASpoly() function), GWASpoly.thresh object (returned GWASpoly::set.threshold() function). function extracts marker scores traits genetic models present GWASpoly output, well length chromosomes. addition, input data GWASpoly.thresh object, extracts significance threshold combination trait genetic model, uses filter significant markers.","code":"gwaspoly_data <- GWAS_data_from_gwaspoly(gwaspoly_res_thr)  ## GWAS_data objects, i.e. tibbles of marker scores str(gwaspoly_data$gwas_data_list, max.level = 1) #> List of 12 #>  $ tuber_eye_depth (general)  : GWAS_dat [3,507 × 4] (S3: GWAS_data/tbl_df/tbl/data.frame) #>  $ tuber_eye_depth (additive) : GWAS_dat [3,507 × 4] (S3: GWAS_data/tbl_df/tbl/data.frame) #>  $ tuber_eye_depth (1-dom-alt): GWAS_dat [2,054 × 4] (S3: GWAS_data/tbl_df/tbl/data.frame) #>  $ tuber_eye_depth (1-dom-ref): GWAS_dat [2,174 × 4] (S3: GWAS_data/tbl_df/tbl/data.frame) #>  $ tuber_shape (general)      : GWAS_dat [3,507 × 4] (S3: GWAS_data/tbl_df/tbl/data.frame) #>  $ tuber_shape (additive)     : GWAS_dat [3,507 × 4] (S3: GWAS_data/tbl_df/tbl/data.frame) #>  $ tuber_shape (1-dom-alt)    : GWAS_dat [2,054 × 4] (S3: GWAS_data/tbl_df/tbl/data.frame) #>  $ tuber_shape (1-dom-ref)    : GWAS_dat [2,174 × 4] (S3: GWAS_data/tbl_df/tbl/data.frame) #>  $ sucrose (general)          : GWAS_dat [3,506 × 4] (S3: GWAS_data/tbl_df/tbl/data.frame) #>  $ sucrose (additive)         : GWAS_dat [3,507 × 4] (S3: GWAS_data/tbl_df/tbl/data.frame) #>  $ sucrose (1-dom-alt)        : GWAS_dat [2,054 × 4] (S3: GWAS_data/tbl_df/tbl/data.frame) #>  $ sucrose (1-dom-ref)        : GWAS_dat [2,174 × 4] (S3: GWAS_data/tbl_df/tbl/data.frame)  ## GWAS_data_thr objects, i.e. tibbles of significant markers str(gwaspoly_data$gwas_data_thr_list, max.level = 1) #> List of 12 #>  $ tuber_eye_depth (general)  : GWAS_dt_ [1 × 4] (S3: GWAS_data_thr/tbl_df/tbl/data.frame) #>  $ tuber_eye_depth (additive) : GWAS_dt_ [3 × 4] (S3: GWAS_data_thr/tbl_df/tbl/data.frame) #>  $ tuber_eye_depth (1-dom-alt): GWAS_dt_ [0 × 4] (S3: GWAS_data_thr/tbl_df/tbl/data.frame) #>  $ tuber_eye_depth (1-dom-ref): GWAS_dt_ [0 × 4] (S3: GWAS_data_thr/tbl_df/tbl/data.frame) #>  $ tuber_shape (general)      : GWAS_dt_ [2 × 4] (S3: GWAS_data_thr/tbl_df/tbl/data.frame) #>  $ tuber_shape (additive)     : GWAS_dt_ [2 × 4] (S3: GWAS_data_thr/tbl_df/tbl/data.frame) #>  $ tuber_shape (1-dom-alt)    : GWAS_dt_ [0 × 4] (S3: GWAS_data_thr/tbl_df/tbl/data.frame) #>  $ tuber_shape (1-dom-ref)    : GWAS_dt_ [0 × 4] (S3: GWAS_data_thr/tbl_df/tbl/data.frame) #>  $ sucrose (general)          : GWAS_dt_ [2 × 4] (S3: GWAS_data_thr/tbl_df/tbl/data.frame) #>  $ sucrose (additive)         : GWAS_dt_ [0 × 4] (S3: GWAS_data_thr/tbl_df/tbl/data.frame) #>  $ sucrose (1-dom-alt)        : GWAS_dt_ [0 × 4] (S3: GWAS_data_thr/tbl_df/tbl/data.frame) #>  $ sucrose (1-dom-ref)        : GWAS_dt_ [0 × 4] (S3: GWAS_data_thr/tbl_df/tbl/data.frame)  ## Chromosomes length str(gwaspoly_data$chrom_length) #> tibble [13 × 2] (S3: tbl_df/tbl/data.frame) #>  $ chromosome: Ord.factor w/ 13 levels \"0\"<\"1\"<\"2\"<\"3\"<..: 1 2 3 4 5 6 7 8 9 10 ... #>  $ length    : int [1:13] 36454137 88583876 48564909 61870684 72026885 51998374 59263222 56628128 56785385 61466245 ..."},{"path":"https://plantandfoodresearch.github.io/hidecan/articles/web_only/gwaspoly_output.html","id":"appendix-reproducing-the-gwaspoly-example-data","dir":"Articles > Web_only","previous_headings":"","what":"Appendix: reproducing the GWASpoly example data","title":"HIDECAN plot from GWASpoly output","text":"example dataset provided can reproduced following code:","code":"library(GWASpoly)  genofile <- system.file(\"extdata\", \"TableS1.csv\", package = \"GWASpoly\") phenofile <- system.file(\"extdata\", \"TableS2.csv\", package = \"GWASpoly\")  ## Reading example data data <- read.GWASpoly(   ploidy = 4,   pheno.file = phenofile,   geno.file = genofile,   format = \"ACGT\",   n.traits = 13,   delim = \",\" )  ## Computing K matrix data.original <- set.K(   data,   LOCO = FALSE,   n.core = 2 )  ## Performing GWAS gwaspoly_res <- GWASpoly(   data.original,   models = c(\"general\", \"additive\", \"1-dom\"),   traits = c(\"tuber_eye_depth\", \"tuber_shape\", \"sucrose\"),   n.core = 2 )  ## Computing significance threshold ## Object returned by get_gwaspoly_example_data() gwaspoly_res_thr <- set.threshold(   gwaspoly_res,    method = \"M.eff\",    level = 0.05 )  # saveRDS(gwaspoly_res_thr, \"gwaspoly_res_thr.rda)"},{"path":"https://plantandfoodresearch.github.io/hidecan/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Olivia Angelin-Bonnet. Author, maintainer.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Angelin-Bonnet O (2024). hidecan: Create HIDECAN Plots Visualising Genome-Wide Association Studies Differential Expression Results. R package version 1.1.0.9000, https://github.com/PlantandFoodResearch/hidecan, https://plantandfoodresearch.github.io/hidecan/.","code":"@Manual{,   title = {hidecan: Create HIDECAN Plots for Visualising Genome-Wide Association Studies and Differential Expression Results},   author = {Olivia Angelin-Bonnet},   year = {2024},   note = {R package version 1.1.0.9000, https://github.com/PlantandFoodResearch/hidecan},   url = {https://plantandfoodresearch.github.io/hidecan/}, }"},{"path":"https://plantandfoodresearch.github.io/hidecan/index.html","id":"hidecan-","dir":"","previous_headings":"","what":"Create HIDECAN Plots for Visualising Genome-Wide Association Studies and Differential Expression Results","title":"Create HIDECAN Plots for Visualising Genome-Wide Association Studies and Differential Expression Results","text":"hidecan R package generating HIDECAN plots, visualisations summarising results one Genome-wide association study (GWAS) transcriptomics differential expression (DE) analysis, alongside candidate genes interest.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create HIDECAN Plots for Visualising Genome-Wide Association Studies and Differential Expression Results","text":"hidecan available CRAN can installed via: Alternatively, can install development version hidecan GitHub :","code":"install.packages(\"hidecan\") # install.packages(\"devtools\") devtools::install_github(\"PlantandFoodResearch/hidecan\")"},{"path":"https://plantandfoodresearch.github.io/hidecan/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Create HIDECAN Plots for Visualising Genome-Wide Association Studies and Differential Expression Results","text":"hidecan package works follows: takes input one data-frames containing GWAS results, differential expression results list candidate genes interest; computes length chromosome based genomic position markers genes provided input data; filters datasets retain significant markers differentially expressed genes, according threshold score /log2-fold change. fold-change set user, can different GWAS differential expression results. displays position significant markers genes alongside candidate genes (HIDECAN plot). plot can customised user via number parameters (e.g. legend position label size). wrapper function hidecan_plot() performs steps. use demonstrated example dataset:","code":"library(hidecan)  ## Getting an example dataset x <- get_example_data()  hidecan_plot(   gwas_list = x[[\"GWAS\"]],          ## data-frame of GWAS results   de_list = x[[\"DE\"]],              ## data-frame of DE results   can_list = x[[\"CAN\"]],            ## data-frame of candidate genes   score_thr_gwas = -log10(0.0001),  ## sign. threshold for GWAS   score_thr_de = -log10(0.05),      ## sign. threshold for DE   log2fc_thr = 0,                   ## log2FC threshold for DE   label_size = 2                    ## label size for candidate genes )"},{"path":"https://plantandfoodresearch.github.io/hidecan/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Create HIDECAN Plots for Visualising Genome-Wide Association Studies and Differential Expression Results","text":"using HIDECAN, please cite: Angelin-Bonnet, O., Vignes, M., Biggs, P. J., Baldwin, S., & Thomson, S. (2023). Visual integration GWAS differential expression results hidecan R package. bioRxiv, 2023-03. https://doi.org/10.1101/2023.03.30.535015","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/CAN_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a CAN_data object — CAN_data","title":"Creates a CAN_data object — CAN_data","text":"Creates CAN_data object tibble data-frame candidate genes.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/CAN_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a CAN_data object — CAN_data","text":"","code":"CAN_data(dat, keep_rownames_as = NULL)"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/CAN_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a CAN_data object — CAN_data","text":"dat Tibble, set candidate genes interest. See Details. keep_rownames_as Character, name column save rownames input data-frame. Default value NULL, .e. rownames discarded.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/CAN_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a CAN_data object — CAN_data","text":"CAN_data object, .e. tibble.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/CAN_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a CAN_data object — CAN_data","text":"input data one row per gene, least following columns: chromosome: character column, chromosome gene located. start end: numeric, starting end position gene (bp). column position constructed middle value (mean) start end. name: character, name candidate genes displayed.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/CAN_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a CAN_data object — CAN_data","text":"","code":"x <- get_example_data()  CAN_data(x[[\"CAN\"]]) #> # A tibble: 32 × 7 #>    id                    chromosome    start      end name    gene_name position #>    <chr>                 <chr>         <dbl>    <dbl> <chr>   <chr>        <dbl> #>  1 PGSC0003DMG400003155  ST4.03ch03 46757152 46762127 4CL     4-coumar…   4.68e7 #>  2 PGSC0003DMG400014223  ST4.03ch03 57466692 57469946 4CL2    4-coumar…   5.75e7 #>  3 PGSC0003DMG400011189  ST4.03ch07  1001854  1006278 HQT     HQT         1.00e6 #>  4 PGSC0003DMG400005492  ST4.03ch05 36342746 36347409 PAL     phenylal…   3.63e7 #>  5 PGSC0003DMG400005279  ST4.03ch05 42523943 42525912 peroxi… peroxida…   4.25e7 #>  6 PGSC0003DMG400007782  ST4.03ch03 38537202 38540209 PHO1A   PHO1A       3.85e7 #>  7 PGSC0003DMG400023182  ST4.03ch02 10091564 10093164 LIPIII… LipIII27    1.01e7 #>  8 PGSC0003DMG400029576  ST4.03ch08 45676042 45677832 PPOs    Polyphen…   4.57e7 #>  9 PGSC0003DMG400018924  ST4.03ch08 45778567 45780333 NA      Polyphen…   4.58e7 #> 10 PGSC0003DMG400018919  ST4.03ch08 45793661 45794229 NA      Polyphen…   4.58e7 #> # ℹ 22 more rows"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/DE_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a DE_data object — DE_data","title":"Creates a DE_data object — DE_data","text":"Creates DE_data object tibble data-frame differential expression results.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/DE_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a DE_data object — DE_data","text":"","code":"DE_data(dat, keep_rownames_as = NULL)"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/DE_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a DE_data object — DE_data","text":"dat Tibble, results differential expression analysis. See Details. keep_rownames_as Character, name column save rownames input data-frame. Default value NULL, .e. rownames discarded.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/DE_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a DE_data object — DE_data","text":"DE_data object, .e. tibble.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/DE_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a DE_data object — DE_data","text":"input data one row per gene transcript, least following columns: chromosome: character column, chromosome gene/transcript located. start end: numeric, starting end position gene/transcript (bp). column position constructed middle value (mean) start end. score padj: numeric, DE score adjusted p-value gene/transcript. column score column missing, constructed -log10(padj). foldChange log2FoldChange: numeric, fold-change log2(fold-change) gene/transcript. column log2FoldChange missing, constructed log2(foldChange).","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/DE_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a DE_data object — DE_data","text":"","code":"x <- get_example_data()  DE_data(x[[\"DE\"]]) #> # A tibble: 10,671 × 9 #>    gene    chromosome   padj log2FoldChange  start    end label   score position #>    <chr>   <chr>       <dbl>          <dbl>  <dbl>  <dbl> <chr>   <dbl>    <dbl> #>  1 PGSC00… ST4.03ch00  0.787       0.0114   4.58e7 4.58e7 Prot…  0.104    4.58e7 #>  2 PGSC00… ST4.03ch01  0.630       0.00529  8.86e7 8.86e7 PhD-…  0.201    8.86e7 #>  3 PGSC00… ST4.03ch02  0.864       0.00362  4.86e7 4.86e7 Acet…  0.0637   4.86e7 #>  4 PGSC00… ST4.03ch03  0.530       0.0320   6.23e7 6.23e7 Phos…  0.276    6.23e7 #>  5 PGSC00… ST4.03ch04  0.975       0.00225  7.22e7 7.22e7 Cons…  0.0109   7.22e7 #>  6 PGSC00… ST4.03ch05 NA          -0.000726 5.20e7 5.20e7 Cons… NA        5.20e7 #>  7 PGSC00… ST4.03ch06  0.844      -0.00323  5.95e7 5.95e7 30S …  0.0739   5.95e7 #>  8 PGSC00… ST4.03ch07  0.944      -0.00337  5.67e7 5.67e7 Ent-…  0.0252   5.67e7 #>  9 PGSC00… ST4.03ch08  0.403       0.0290   5.68e7 5.68e7 B3 d…  0.394    5.68e7 #> 10 PGSC00… ST4.03ch09 NA          -0.000241 6.15e7 6.15e7 Cons… NA        6.15e7 #> # ℹ 10,661 more rows"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/GWAS_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a GWAS_data object — GWAS_data","title":"Creates a GWAS_data object — GWAS_data","text":"Creates GWAS_data object tibble data-frame GWAS results.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/GWAS_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a GWAS_data object — GWAS_data","text":"","code":"GWAS_data(dat, keep_rownames_as = NULL)"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/GWAS_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a GWAS_data object — GWAS_data","text":"dat Tibble, results GWAS analysis. See Details. keep_rownames_as Character, name column save rownames input data-frame. Default value NULL, .e. rownames discarded.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/GWAS_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a GWAS_data object — GWAS_data","text":"GWAS_data object, .e. tibble.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/GWAS_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a GWAS_data object — GWAS_data","text":"input data one row per marker, least following columns: chromosome: character column, chromosome marker located. position: numeric, physical position marker along chromosome (bp). score padj: numeric, GWAS score adjusted p-value marker. column score column missing, constructed -log10(padj).","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/GWAS_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a GWAS_data object — GWAS_data","text":"","code":"x <- get_example_data()  GWAS_data(x[[\"GWAS\"]]) #> # A tibble: 35,481 × 4 #>    id                  chromosome position score #>    <chr>               <chr>         <dbl> <dbl> #>  1 ST4.03ch00_45467783 ST4.03ch00 45467783 0.191 #>  2 ST4.03ch01_88589716 ST4.03ch01 88589716 1.84  #>  3 ST4.03ch02_48614228 ST4.03ch02 48614228 0.381 #>  4 ST4.03ch03_62263578 ST4.03ch03 62263578 0.661 #>  5 ST4.03ch04_72139135 ST4.03ch04 72139135 0.640 #>  6 ST4.03ch05_52040302 ST4.03ch05 52040302 0.346 #>  7 ST4.03ch06_59434834 ST4.03ch06 59434834 1.13  #>  8 ST4.03ch07_56713057 ST4.03ch07 56713057 0.213 #>  9 ST4.03ch08_56937627 ST4.03ch08 56937627 0.843 #> 10 ST4.03ch09_61537423 ST4.03ch09 61537423 0.512 #> # ℹ 35,471 more rows"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/GWAS_data_from_gwaspoly.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts information from GWASpoly output — GWAS_data_from_gwaspoly","title":"Extracts information from GWASpoly output — GWAS_data_from_gwaspoly","text":"Extracts GWAS results chromosome length GWASpoly output.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/GWAS_data_from_gwaspoly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts information from GWASpoly output — GWAS_data_from_gwaspoly","text":"","code":"GWAS_data_from_gwaspoly(gwaspoly_output, traits = NULL, models = NULL)"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/GWAS_data_from_gwaspoly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts information from GWASpoly output — GWAS_data_from_gwaspoly","text":"gwaspoly_output GWASpoly.fitted GWASpoly.thresh object (returned GWASpoly::GWASpoly() GWASpoly::set.threshold() functions). traits Character vector, traits GWAS results extracted. NULL (default value), traits present considered. models Character vector, genetic models GWAS results extracted. NULL (default value), genetic models present considered.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/GWAS_data_from_gwaspoly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts information from GWASpoly output — GWAS_data_from_gwaspoly","text":"list following elements: gwas_data_list: named list GWAS_data objects, giving markers score possible trait/genetic model combination. names list form trait (genetic model). gwas_data_thr_list: input data GWASpoly.thresh object (GWASpoly::set.threshold() function), named list GwAS_data_thr, significant markers score possible trait/genetic model combination. names list form trait (genetic model). chrom_length: tibble one row per chromosome, giving length (bp) chromosome.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/apply_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters GWAS or DE results based on a threshold — apply_threshold","title":"Filters GWAS or DE results based on a threshold — apply_threshold","text":"Filters markers genes/transcripts based threshold applied GWAS DE score, log2(fold-change) (applicable). set candidate genes, simply returns list. Note markers genes missing score log2(fold-change) removed dataset.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/apply_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters GWAS or DE results based on a threshold — apply_threshold","text":"","code":"apply_threshold(x, score_thr = 0, log2fc_thr = 0)  # S3 method for class 'GWAS_data' apply_threshold(x, score_thr = 0, log2fc_thr = 0)  # S3 method for class 'DE_data' apply_threshold(x, score_thr = 0, log2fc_thr = 0)  # S3 method for class 'CAN_data' apply_threshold(x, score_thr = 0, log2fc_thr = 0)  # Default S3 method apply_threshold(x, score_thr = 0, log2fc_thr = 0)"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/apply_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters GWAS or DE results based on a threshold — apply_threshold","text":"x Either GWAS_data, DE_data CAN_data object. score_thr Numeric, threshold use markers' genes/transcripts' score. markers genes score equal higher threshold retained. Default value 0. Ignored CAN_data. log2fc_thr Numeric, threshold use absolute value genes/ transcripts' log2(fold-change). genes/transcripts absolute log2(fold-change) equal higher threshold retained. Ignored GWAS_data CAN_data.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/apply_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filters GWAS or DE results based on a threshold — apply_threshold","text":"filtered tibble (class GWAS_data_thr, DE_data_thr CAN_data_thr).","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/apply_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters GWAS or DE results based on a threshold — apply_threshold","text":"","code":"x <- get_example_data()  ## For GWAS results apply_threshold(GWAS_data(x[[\"GWAS\"]]), score_thr = 4) #> # A tibble: 37 × 4 #>    id                  chromosome position score #>    <chr>               <chr>         <dbl> <dbl> #>  1 ST4.03ch00_22680252 ST4.03ch00 22680252  4.41 #>  2 ST4.03ch01_6317643  ST4.03ch01  6317643  4.15 #>  3 ST4.03ch01_7671100  ST4.03ch01  7671100  4.43 #>  4 ST4.03ch01_8653747  ST4.03ch01  8653747  4.69 #>  5 ST4.03ch01_12842648 ST4.03ch01 12842648  6.85 #>  6 ST4.03ch01_13334335 ST4.03ch01 13334335  5.24 #>  7 ST4.03ch01_13544786 ST4.03ch01 13544786  4.00 #>  8 ST4.03ch01_42743974 ST4.03ch01 42743974  4.00 #>  9 ST4.03ch01_42949112 ST4.03ch01 42949112  4.18 #> 10 ST4.03ch01_52529264 ST4.03ch01 52529264  4.85 #> # ℹ 27 more rows  ## For DE results - in second line, no threshold is applied ## on the log2(fold-change) apply_threshold(DE_data(x[[\"DE\"]]), score_thr = -log10(0.05), log2fc_thr = 1) #> # A tibble: 5 × 9 #>   gene       chromosome   padj log2FoldChange  start    end label score position #>   <chr>      <chr>       <dbl>          <dbl>  <dbl>  <dbl> <chr> <dbl>    <dbl> #> 1 PGSC0003D… ST4.03ch01 0.0488           1.61 8.15e7 8.15e7 Gene…  1.31   8.15e7 #> 2 PGSC0003D… ST4.03ch03 0.0488           1.14 3.49e7 3.49e7 Gene…  1.31   3.49e7 #> 3 PGSC0003D… ST4.03ch03 0.0184           3.06 5.99e7 5.99e7 Phos…  1.73   5.99e7 #> 4 PGSC0003D… ST4.03ch05 0.0414           1.10 3.47e6 3.47e6 Cons…  1.38   3.47e6 #> 5 PGSC0003D… ST4.03ch09 0.0328           1.51 5.40e7 5.40e7 Vici…  1.48   5.40e7 apply_threshold(DE_data(x[[\"DE\"]]), score_thr = -log10(0.05), log2fc_thr = 0) #> # A tibble: 57 × 9 #>    gene     chromosome    padj log2FoldChange  start    end label score position #>    <chr>    <chr>        <dbl>          <dbl>  <dbl>  <dbl> <chr> <dbl>    <dbl> #>  1 PGSC000… ST4.03ch00 0.0488           0.838 3.80e7 3.80e7 Pept…  1.31   3.80e7 #>  2 PGSC000… ST4.03ch01 0.0362          -0.181 5.83e7 5.83e7 Cons…  1.44   5.83e7 #>  3 PGSC000… ST4.03ch01 0.0488           1.61  8.15e7 8.15e7 Gene…  1.31   8.15e7 #>  4 PGSC000… ST4.03ch01 0.00465          0.438 8.45e7 8.45e7 Phi-2  2.33   8.45e7 #>  5 PGSC000… ST4.03ch02 0.0488           0.325 2.26e7 2.26e7 Cons…  1.31   2.26e7 #>  6 PGSC000… ST4.03ch02 0.0266           0.768 3.32e7 3.32e7 Leuc…  1.58   3.32e7 #>  7 PGSC000… ST4.03ch02 0.0488           0.381 4.14e7 4.14e7 Cons…  1.31   4.14e7 #>  8 PGSC000… ST4.03ch02 0.0314           0.663 4.23e7 4.23e7 Home…  1.50   4.23e7 #>  9 PGSC000… ST4.03ch03 0.0488          -0.804 5.33e5 5.41e5 SNF2…  1.31   5.37e5 #> 10 PGSC000… ST4.03ch03 0.0493          -0.345 9.26e6 9.26e6 Dihy…  1.31   9.26e6 #> # ℹ 47 more rows  ## No effect on the Candidate genes apply_threshold(CAN_data(x[[\"CAN\"]])) #> # A tibble: 32 × 7 #>    id                    chromosome    start      end name    gene_name position #>    <chr>                 <chr>         <dbl>    <dbl> <chr>   <chr>        <dbl> #>  1 PGSC0003DMG400003155  ST4.03ch03 46757152 46762127 4CL     4-coumar…   4.68e7 #>  2 PGSC0003DMG400014223  ST4.03ch03 57466692 57469946 4CL2    4-coumar…   5.75e7 #>  3 PGSC0003DMG400011189  ST4.03ch07  1001854  1006278 HQT     HQT         1.00e6 #>  4 PGSC0003DMG400005492  ST4.03ch05 36342746 36347409 PAL     phenylal…   3.63e7 #>  5 PGSC0003DMG400005279  ST4.03ch05 42523943 42525912 peroxi… peroxida…   4.25e7 #>  6 PGSC0003DMG400007782  ST4.03ch03 38537202 38540209 PHO1A   PHO1A       3.85e7 #>  7 PGSC0003DMG400023182  ST4.03ch02 10091564 10093164 LIPIII… LipIII27    1.01e7 #>  8 PGSC0003DMG400029576  ST4.03ch08 45676042 45677832 PPOs    Polyphen…   4.57e7 #>  9 PGSC0003DMG400018924  ST4.03ch08 45778567 45780333 NA      Polyphen…   4.58e7 #> 10 PGSC0003DMG400018919  ST4.03ch08 45793661 45794229 NA      Polyphen…   4.58e7 #> # ℹ 22 more rows"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/combine_chrom_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes chromosomes' length from list — combine_chrom_length","title":"Computes chromosomes' length from list — combine_chrom_length","text":"Computes length (bp) chromosome list GWAS DE results well candidate gene lists.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/combine_chrom_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes chromosomes' length from list — combine_chrom_length","text":"","code":"combine_chrom_length(x)"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/combine_chrom_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes chromosomes' length from list — combine_chrom_length","text":"x list GWAS_data, DE_data CAN_data objects.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/combine_chrom_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes chromosomes' length from list — combine_chrom_length","text":"tibble two columns: chromosome (chromosome name) length (chromosome length base pair).","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/combine_chrom_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes chromosomes' length from list — combine_chrom_length","text":"","code":"x <- get_example_data() y <- list(\"GWAS\" = GWAS_data(x[[\"GWAS\"]]),           \"DE\" = DE_data(x[[\"DE\"]]),           \"CAN\" = CAN_data(x[[\"CAN\"]]))  combine_chrom_length(y) #> # A tibble: 13 × 2 #>    chromosome   length #>    <chr>         <dbl> #>  1 ST4.03ch00 45813526 #>  2 ST4.03ch01 88627702 #>  3 ST4.03ch02 48614228 #>  4 ST4.03ch03 62263578 #>  5 ST4.03ch04 72170119 #>  6 ST4.03ch05 52040326 #>  7 ST4.03ch06 59476545 #>  8 ST4.03ch07 56715111 #>  9 ST4.03ch08 56937627 #> 10 ST4.03ch09 61539681 #> 11 ST4.03ch10 59687482 #> 12 ST4.03ch11 45409456 #> 13 ST4.03ch12 61152223"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/compute_chrom_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes chromosomes' length — compute_chrom_length","title":"Computes chromosomes' length — compute_chrom_length","text":"Computes length (bp) chromosome maximum position markers genes chromosome.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/compute_chrom_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes chromosomes' length — compute_chrom_length","text":"","code":"compute_chrom_length(x)  # S3 method for class 'GWAS_data' compute_chrom_length(x)  # S3 method for class 'DE_data' compute_chrom_length(x)  # S3 method for class 'CAN_data' compute_chrom_length(x)"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/compute_chrom_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes chromosomes' length — compute_chrom_length","text":"x Either GWAS_data, DE_data CAN_data object.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/compute_chrom_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes chromosomes' length — compute_chrom_length","text":"tibble two columns: chromosome (chromosome name) length (chromosome length base pair).","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/compute_chrom_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes chromosomes' length — compute_chrom_length","text":"","code":"x <- get_example_data()  compute_chrom_length(GWAS_data(x[[\"GWAS\"]])) #> # A tibble: 13 × 2 #>    chromosome   length #>    <chr>         <dbl> #>  1 ST4.03ch00 45467783 #>  2 ST4.03ch01 88589716 #>  3 ST4.03ch02 48614228 #>  4 ST4.03ch03 62263578 #>  5 ST4.03ch04 72139135 #>  6 ST4.03ch05 52040302 #>  7 ST4.03ch06 59434834 #>  8 ST4.03ch07 56713057 #>  9 ST4.03ch08 56937627 #> 10 ST4.03ch09 61537423 #> 11 ST4.03ch10 59687482 #> 12 ST4.03ch11 45409344 #> 13 ST4.03ch12 61148638 compute_chrom_length(DE_data(x[[\"DE\"]])) #> # A tibble: 13 × 2 #>    chromosome   length #>    <chr>         <dbl> #>  1 ST4.03ch00 45813526 #>  2 ST4.03ch01 88627702 #>  3 ST4.03ch02 48578978 #>  4 ST4.03ch03 62258929 #>  5 ST4.03ch04 72170119 #>  6 ST4.03ch05 52040326 #>  7 ST4.03ch06 59476545 #>  8 ST4.03ch07 56715111 #>  9 ST4.03ch08 56849780 #> 10 ST4.03ch09 61539681 #> 11 ST4.03ch10 59684952 #> 12 ST4.03ch11 45409456 #> 13 ST4.03ch12 61152223 compute_chrom_length(CAN_data(x[[\"CAN\"]])) #> # A tibble: 7 × 2 #>   chromosome   length #>   <chr>         <dbl> #> 1 ST4.03ch02 44537572 #> 2 ST4.03ch03 57469946 #> 3 ST4.03ch04 63041935 #> 4 ST4.03ch05 42525912 #> 5 ST4.03ch07 51457407 #> 6 ST4.03ch08 45907390 #> 7 ST4.03ch12 55092326"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/create_hidecan_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a HIDECAN plot — create_hidecan_plot","title":"Creates a HIDECAN plot — create_hidecan_plot","text":"Creates HIDECAN plot list filtered GWAS DE results /candidate genes.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/create_hidecan_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a HIDECAN plot — create_hidecan_plot","text":"","code":"create_hidecan_plot(   x,   chrom_length,   colour_genes_by_score = TRUE,   remove_empty_chrom = FALSE,   chroms = NULL,   chrom_limits = NULL,   title = NULL,   subtitle = NULL,   n_rows = NULL,   n_cols = 2,   legend_position = \"bottom\",   point_size = 3,   label_size = 3.5,   label_padding = 0.15 )"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/create_hidecan_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a HIDECAN plot — create_hidecan_plot","text":"x list GWAS_data_thr, DE_data_thr /CAN_data_thr produced apply_threshold() function. named, names appended y-axis labels (use ' ' empty name list). chrom_length Tibble columns chromosome length, giving chromosome length bp (see combine_chrom_length() function). colour_genes_by_score Logical, whether colour genes score (TRUE) log2(fold-change) (FALSE). Default value TRUE. remove_empty_chrom Logical, chromosomes significant markers/genes candidate genes removed plot? Default value FALSE. chroms Character vector, name chromosomes include plot. NULL (default value), chromosomes included. chrom_limits Integer vector length 2, named list elements integer vectors length 2. vector, gives lower upper limit chromosomes (bp) use plot. named list, names correspond chromosome names. Gives chromosome lower upper limits (bp) use plot. specified chromosomes. Default value NULL, .e. limits applied chromosomes (plotted entirety). title Character, title plot. Default value NULL (.e. title added plot). subtitle Character, subtitle plot. Default value NULL (.e. subtitle added plot). n_rows Integer, number rows chromosomes create plot. Default value NULL. n_cols Integer, number columns chromosomes create plot. Default value 2. set NULL n_rows NULL. legend_position Character, position legend plot. Can bottom (default value), top, right, left none. point_size Numeric, size points plot. Default value 3. label_size Numeric, size gene labels plot. Default value 3.5 (geom_label_repel). label_padding Numeric, amount padding around gene labels plot, unit number. Default value 0.15 (geom_label_repel).","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/create_hidecan_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a HIDECAN plot — create_hidecan_plot","text":"ggplot.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/create_hidecan_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a HIDECAN plot — create_hidecan_plot","text":"","code":"if (interactive()) { x <- get_example_data() y <- list(\"GWAS\" = GWAS_data(x[[\"GWAS\"]]),           \"DE\" = DE_data(x[[\"DE\"]]),           \"CAN\" = CAN_data(x[[\"CAN\"]]))  chrom_length <- combine_chrom_length(y)  z <- list(   apply_threshold(y[[\"GWAS\"]], score_thr = 4),   apply_threshold(y[[\"DE\"]], score_thr = 1.3, log2fc_thr = 0.5),   apply_threshold(y[[\"CAN\"]]) )  create_hidecan_plot(z,                     chrom_length,                     label_size = 2)  ## Colour genes according to their fold-change create_hidecan_plot(z,                     chrom_length,                     colour_genes_by_score = FALSE,                     label_size = 2)  ## Add names to the datasets create_hidecan_plot(setNames(z, c(\"Genomics\", \"RNAseq\", \"My list\")),                     chrom_length,                     colour_genes_by_score = FALSE,                     label_size = 2)  ## Add names to some of the datasets only (e.g. not for GWAS results) create_hidecan_plot(setNames(z, c(\" \", \"RNAseq\", \"My list\")),                     chrom_length,                     colour_genes_by_score = FALSE,                     label_size = 2)  ## Set limits on all chromosomes (to \"zoom in\" to the 10-20Mb region) create_hidecan_plot(z,                     chrom_length,                     label_size = 2,                     chrom_limits = c(10e6, 20e6))  ## Set limits on some chromosomes only create_hidecan_plot(z,                     chrom_length,                     label_size = 2,                     chrom_limits = list(\"ST4.03ch00\" = c(10e6, 20e6),                                         \"ST4.03ch02\" = c(15e6, 25e6))) }"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/dot-check_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether some columns are present in a tibble — .check_cols","title":"Checks whether some columns are present in a tibble — .check_cols","text":"Checks whether columns present tibble","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/dot-check_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether some columns are present in a tibble — .check_cols","text":"","code":".check_cols(x, col_names, param_name = \"Input data-frame\")"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/dot-check_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether some columns are present in a tibble — .check_cols","text":"x Tibble col_names character vector column names param_name Character, name dataframe use error message.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/dot-check_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether some columns are present in a tibble — .check_cols","text":"invisible NULL","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/dot-compute_chrom_length_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes chromosomes' length for a tibble of genes — .compute_chrom_length_genes","title":"Computes chromosomes' length for a tibble of genes — .compute_chrom_length_genes","text":"Computes length (bp) chromosome maximum position genes chromosome.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/dot-compute_chrom_length_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes chromosomes' length for a tibble of genes — .compute_chrom_length_genes","text":"","code":".compute_chrom_length_genes(x)"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/dot-compute_chrom_length_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes chromosomes' length for a tibble of genes — .compute_chrom_length_genes","text":"x Either DE_data CAN_data object.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/dot-compute_chrom_length_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes chromosomes' length for a tibble of genes — .compute_chrom_length_genes","text":"tibble two columns: chromosome (chromosome name) length (chromosome length base pair).","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/get_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset — get_example_data","title":"Example dataset — get_example_data","text":"Returns list example datasets.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/get_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataset — get_example_data","text":"","code":"get_example_data()"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/get_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example dataset — get_example_data","text":"list following elements: GWAS: tibble GWAS results, columns id, chromosome, position score. DE: tibble differential expression results, columns gene, chromosome, padj, log2FoldChange, start, end label. CAN: tibble candidate genes, columns id, chromosome, start, end, name gene_name.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/get_example_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example dataset — get_example_data","text":"dataset used example presented : Angelin-Bonnet et al., BMC Plant Biology (2023). study, tetraploid potato plants half-sibling breeding population used assess genetic components tuber bruising. Capture sequencing used obtain genomic information individuals, genome-wide association study (GWAS) performed 72,847 genomic biallelic variants obtained 158 plants bruising score measured. GWAS analysis carried GWASpoly package. addition, expression data obtained 25,163 transcribed genes, differential expression (DE) analysis carried 41 low- 33 high-bruising samples. Finally, literature search yielded list 42 candidate genes identified previous studies involved potato tuber bruising mechanisms. subset GWAS DE results, well list candidate genes literature, made available function. complete GWAS results table, half genomic variants GWAS score < 3.5 randomly selected consequently discarded, yielding dataset GWAS scores 35,481 variants. Similarly, half transcribed genes DE results table adjusted p-value > 0.05 randomly selected discarded, yielding dataset DE results 10,671 transcribed genes. filtering performed reduce size datasets (accordance CRAN policies), ensures significant markers genes retained datasets. Finally, candidate genes located chromosome 3 removed example dataset better clarity resulting HIDECAN plot, leaving 32 candidate genes.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/hidecan_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to create a HIDECAN plot — hidecan_plot","title":"Wrapper to create a HIDECAN plot — hidecan_plot","text":"Wrapper function create HIDECAN plot GWAS results, DE results candidate genes.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/hidecan_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to create a HIDECAN plot — hidecan_plot","text":"","code":"hidecan_plot(   gwas_list = NULL,   de_list = NULL,   can_list = NULL,   score_thr_gwas = 4,   score_thr_de = 2,   log2fc_thr = 1,   chrom_length = NULL,   colour_genes_by_score = TRUE,   remove_empty_chrom = FALSE,   chroms = NULL,   chrom_limits = NULL,   title = NULL,   subtitle = NULL,   n_rows = NULL,   n_cols = 2,   legend_position = \"bottom\",   point_size = 3,   label_size = 3.5,   label_padding = 0.15 )"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/hidecan_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to create a HIDECAN plot — hidecan_plot","text":"gwas_list Data-frame list data-frames containing GWAS results, least chromosome, position either padj score columns. named list, names used plot. de_list Data-frame list data-frames containing DE results, least chromosome, start, end, log2FoldChange either padj score columns. named list, names used plot. can_list Data-frame list data-frames containing candidate genes, least chromosome, start, end name columns. named list, names used plot. score_thr_gwas Numeric, score threshold GWAS results used select markers plotted. Default value 4. score_thr_de Numeric, score threshold DE results used select markers plotted. Default value 2. log2fc_thr Numeric, log2(fold-change) threshold used select genes plotted. Default value 1. chrom_length Optional, tibble columns chromosome length, giving chromosome length bp. NULL (default), inferred GWAS, DE candidate gene data. colour_genes_by_score Logical, whether colour genes score (TRUE) log2(fold-change) (FALSE). Default value TRUE. remove_empty_chrom Logical, chromosomes significant markers/genes candidate genes removed plot? Default value FALSE. chroms Character vector, name chromosomes include plot. NULL (default value), chromosomes included. chrom_limits Integer vector length 2, named list elements integer vectors length 2. vector, gives lower upper limit chromosomes (bp) use plot. named list, names correspond chromosome names. Gives chromosome lower upper limits (bp) use plot. specified chromosomes. Default value NULL, .e. limits applied chromosomes (plotted entirety). title Character, title plot. Default value NULL (.e. title added plot). subtitle Character, subtitle plot. Default value NULL (.e. subtitle added plot). n_rows Integer, number rows chromosomes create plot. Default value NULL. n_cols Integer, number columns chromosomes create plot. Default value 2. set NULL n_rows NULL. legend_position Character, position legend plot. Can bottom (default value), top, right, left none. point_size Numeric, size points plot. Default value 3. label_size Numeric, size gene labels plot. Default value 3.5 (geom_label_repel). label_padding Numeric, amount padding around gene labels plot, unit number. Default value 0.15 (geom_label_repel).","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/hidecan_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper to create a HIDECAN plot — hidecan_plot","text":"ggplot.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/hidecan_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper to create a HIDECAN plot — hidecan_plot","text":"","code":"if (interactive()) { x <- get_example_data()  ## Typical example with one GWAs result table, one DE result table and ## one table of candidate genes hidecan_plot(gwas_list = x[[\"GWAS\"]],              de_list = x[[\"DE\"]],              can_list = x[[\"CAN\"]],              score_thr_gwas = -log10(0.0001),              score_thr_de = -log10(0.005),              log2fc_thr = 0,              label_size = 2)  ## Example with two sets of GWAS results hidecan_plot(gwas_list = list(x[[\"GWAS\"]], x[[\"GWAS\"]]),              score_thr_gwas = 4)  ## Example with two sets of DE results, with names hidecan_plot(de_list = list(\"X vs Y\" = x[[\"DE\"]],                             \"X vs Z\" = x[[\"DE\"]]),              score_thr_de = -log10(0.05),              log2fc_thr = 0)  ## Set limits on all chromosomes (to \"zoom in\" to the 10-20Mb region) hidecan_plot(gwas_list = x[[\"GWAS\"]],              de_list = x[[\"DE\"]],              can_list = x[[\"CAN\"]],              score_thr_gwas = -log10(0.0001),              score_thr_de = -log10(0.005),              log2fc_thr = 0,              label_size = 2,              chrom_limits = c(10e6, 20e6))  ## Set limits on some chromosomes only hidecan_plot(gwas_list = x[[\"GWAS\"]],              de_list = x[[\"DE\"]],              can_list = x[[\"CAN\"]],              score_thr_gwas = -log10(0.0001),              score_thr_de = -log10(0.005),              log2fc_thr = 0,              label_size = 2,              chrom_limits = list(\"ST4.03ch00\" = c(10e6, 20e6),                                   \"ST4.03ch02\" = c(15e6, 25e6))) }"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/hidecan_plot_from_gwaspoly.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a HIDECAN plot from GWASpoly output — hidecan_plot_from_gwaspoly","title":"Creates a HIDECAN plot from GWASpoly output — hidecan_plot_from_gwaspoly","text":"Creates HIDECAN plot GWAS results GWASpoly.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/hidecan_plot_from_gwaspoly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a HIDECAN plot from GWASpoly output — hidecan_plot_from_gwaspoly","text":"","code":"hidecan_plot_from_gwaspoly(gwaspoly_output, traits = NULL, models = NULL, ...)"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/hidecan_plot_from_gwaspoly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a HIDECAN plot from GWASpoly output — hidecan_plot_from_gwaspoly","text":"gwaspoly_output GWASpoly.thresh object (returned GWASpoly::set.threshold() function). traits Character vector, traits GWAS results extracted. NULL (default value), traits present considered. models Character vector, genetic models GWAS results extracted. NULL (default value), genetic models present considered. ... arguments passed create_hidecan_plot() function.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/hidecan_plot_from_gwaspoly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a HIDECAN plot from GWASpoly output — hidecan_plot_from_gwaspoly","text":"ggplot.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/manhattan_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a Manhattan plot — manhattan_plot","title":"Creates a Manhattan plot — manhattan_plot","text":"Creates Manhattan plot data-frame GWAS results.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/manhattan_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a Manhattan plot — manhattan_plot","text":"","code":"manhattan_plot(   gwas_list,   score_thr = NULL,   chroms = NULL,   title = NULL,   subtitle = NULL,   size_range = c(1, 3),   chrom_col = NULL,   ncol = NULL )"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/manhattan_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a Manhattan plot — manhattan_plot","text":"gwas_list Data-frame list data-frames containing GWAS results, least chromosome, position either padj score columns. named list, names used plot. score_thr Numeric, significance threshold GWAS score. value provided, represented Manhattan plot red dashed line. NULL (default value), significance threshold line drawn. chroms Character vector, name chromosomes include plot. NULL (default value), chromosomes included. title Character, title plot. Default value NULL (.e. title added plot). subtitle Character, subtitle plot. Default value NULL (.e. subtitle added plot). size_range Numeric vector length 2, minimum maximum point size plot. Points size proportional GWAS score. Default value c(1, 3). chrom_col Character vector colour names code, colours use draw points chromosome. Names ignored. vector provided contains less colours number chromosomes plot, values recycled. NULL, default, colours automatically chosen predefined palette. ncol Integer, number Manhattan plots per row several GWAS results provided.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/manhattan_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a Manhattan plot — manhattan_plot","text":"ggplot.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/manhattan_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a Manhattan plot — manhattan_plot","text":"","code":"if (interactive()){ x <- get_example_data()[[\"GWAS\"]]  manhattan_plot(x)  ## Adding a significance threshold line in the plot manhattan_plot(x, score_thr = 4)   ## Use only two colours for the chromosomes manhattan_plot(x,                score_thr = 4,                chrom_col = c(\"dodgerblue1\", \"dodgerblue4\")) }"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/new_CAN_data.html","id":null,"dir":"Reference","previous_headings":"","what":"CAN_data constructor — new_CAN_data","title":"CAN_data constructor — new_CAN_data","text":"CAN_data constructor","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/new_CAN_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CAN_data constructor — new_CAN_data","text":"","code":"new_CAN_data(dat)"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/new_CAN_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CAN_data constructor — new_CAN_data","text":"dat Tibble, containing information genes interest, least columns chromosome, start, end, position name.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/new_CAN_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CAN_data constructor — new_CAN_data","text":"CAN_data object, .e. tibble.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/new_DE_data.html","id":null,"dir":"Reference","previous_headings":"","what":"DE_data constructor — new_DE_data","title":"DE_data constructor — new_DE_data","text":"DE_data constructor","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/new_DE_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DE_data constructor — new_DE_data","text":"","code":"new_DE_data(dat)"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/new_DE_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DE_data constructor — new_DE_data","text":"dat Tibble, results differential expression analysis, least columns chromosome, score, log2FoldChange, start, end position.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/new_DE_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DE_data constructor — new_DE_data","text":"DE_data object, .e. tibble.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/new_GWAS_data.html","id":null,"dir":"Reference","previous_headings":"","what":"GWAS_data constructor — new_GWAS_data","title":"GWAS_data constructor — new_GWAS_data","text":"GWAS_data constructor","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/new_GWAS_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GWAS_data constructor — new_GWAS_data","text":"","code":"new_GWAS_data(dat)"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/new_GWAS_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GWAS_data constructor — new_GWAS_data","text":"dat Tibble, results GWAS analysis, least columns chromosome, position score.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/new_GWAS_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GWAS_data constructor — new_GWAS_data","text":"GWAS_data object, .e. tibble.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/run_hidecan_shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Launches the HIDECAN shiny app — run_hidecan_shiny","title":"Launches the HIDECAN shiny app — run_hidecan_shiny","text":"Starts HIDECAN shiny app. app reads csv data produce HIDECAN plot.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/run_hidecan_shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launches the HIDECAN shiny app — run_hidecan_shiny","text":"","code":"run_hidecan_shiny()"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/run_hidecan_shiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launches the HIDECAN shiny app — run_hidecan_shiny","text":"return value, called side effects (launching shiny app).","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/validate_CAN_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks validity of input for CAN_data constructor — validate_CAN_data","title":"Checks validity of input for CAN_data constructor — validate_CAN_data","text":"Checks validity input CAN_data constructor","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/validate_CAN_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks validity of input for CAN_data constructor — validate_CAN_data","text":"","code":"validate_CAN_data(x)"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/validate_CAN_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks validity of input for CAN_data constructor — validate_CAN_data","text":"x, CAN_data object constructed via new_CAN_data.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/validate_CAN_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks validity of input for CAN_data constructor — validate_CAN_data","text":"CAN_data object, .e. tibble.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/validate_DE_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks validity of input for DE_data constructor — validate_DE_data","title":"Checks validity of input for DE_data constructor — validate_DE_data","text":"Checks validity input DE_data constructor","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/validate_DE_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks validity of input for DE_data constructor — validate_DE_data","text":"","code":"validate_DE_data(x)"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/validate_DE_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks validity of input for DE_data constructor — validate_DE_data","text":"x, DE_data object constructed via new_DE_data.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/validate_DE_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks validity of input for DE_data constructor — validate_DE_data","text":"DE_data object, .e. tibble.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/validate_GWAS_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks validity of input for GWAS_data constructor — validate_GWAS_data","title":"Checks validity of input for GWAS_data constructor — validate_GWAS_data","text":"Checks validity input GWAS_data constructor","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/validate_GWAS_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks validity of input for GWAS_data constructor — validate_GWAS_data","text":"","code":"validate_GWAS_data(x)"},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/validate_GWAS_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks validity of input for GWAS_data constructor — validate_GWAS_data","text":"x, GWAS_data object constructed via new_GWAS_data.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/reference/validate_GWAS_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks validity of input for GWAS_data constructor — validate_GWAS_data","text":"GWAS_data object, .e. tibble.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/news/index.html","id":"hidecan-1109000","dir":"Changelog","previous_headings":"","what":"hidecan 1.1.0.9000","title":"hidecan 1.1.0.9000","text":"Added manhattan_plot() function generate Manhattan plots table GWAS results. Fixed bug specifying chromosome limits hidecan_plot_from_gwaspoly() mess ordering chromosomes plot.","code":""},{"path":"https://plantandfoodresearch.github.io/hidecan/news/index.html","id":"hidecan-110","dir":"Changelog","previous_headings":"","what":"hidecan 1.1.0","title":"hidecan 1.1.0","text":"CRAN release: 2023-02-10 Removed get_gwaspoly_example_data() function package doesn’t depend GWASpoly (CRAN submission) Saved example object previously returned get_gwaspoly_example_data() rda file extdata folder","code":""}]
